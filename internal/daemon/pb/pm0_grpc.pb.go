// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: .proto/pm0.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProcessService_Start_FullMethodName   = "/pm0.ProcessService/Start"
	ProcessService_List_FullMethodName    = "/pm0.ProcessService/List"
	ProcessService_Stop_FullMethodName    = "/pm0.ProcessService/Stop"
	ProcessService_Restart_FullMethodName = "/pm0.ProcessService/Restart"
)

// ProcessServiceClient is the client API for ProcessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProcessServiceClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (ProcessService_StopClient, error)
	Restart(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (ProcessService_RestartClient, error)
}

type processServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProcessServiceClient(cc grpc.ClientConnInterface) ProcessServiceClient {
	return &processServiceClient{cc}
}

func (c *processServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, ProcessService_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, ProcessService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (ProcessService_StopClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProcessService_ServiceDesc.Streams[0], ProcessService_Stop_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &processServiceStopClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessService_StopClient interface {
	Recv() (*StopResponse, error)
	grpc.ClientStream
}

type processServiceStopClient struct {
	grpc.ClientStream
}

func (x *processServiceStopClient) Recv() (*StopResponse, error) {
	m := new(StopResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *processServiceClient) Restart(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (ProcessService_RestartClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProcessService_ServiceDesc.Streams[1], ProcessService_Restart_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &processServiceRestartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProcessService_RestartClient interface {
	Recv() (*StopResponse, error)
	grpc.ClientStream
}

type processServiceRestartClient struct {
	grpc.ClientStream
}

func (x *processServiceRestartClient) Recv() (*StopResponse, error) {
	m := new(StopResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProcessServiceServer is the server API for ProcessService service.
// All implementations must embed UnimplementedProcessServiceServer
// for forward compatibility
type ProcessServiceServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	List(context.Context, *emptypb.Empty) (*ListResponse, error)
	Stop(*StopRequest, ProcessService_StopServer) error
	Restart(*StopRequest, ProcessService_RestartServer) error
	mustEmbedUnimplementedProcessServiceServer()
}

// UnimplementedProcessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProcessServiceServer struct {
}

func (UnimplementedProcessServiceServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedProcessServiceServer) List(context.Context, *emptypb.Empty) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedProcessServiceServer) Stop(*StopRequest, ProcessService_StopServer) error {
	return status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedProcessServiceServer) Restart(*StopRequest, ProcessService_RestartServer) error {
	return status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedProcessServiceServer) mustEmbedUnimplementedProcessServiceServer() {}

// UnsafeProcessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProcessServiceServer will
// result in compilation errors.
type UnsafeProcessServiceServer interface {
	mustEmbedUnimplementedProcessServiceServer()
}

func RegisterProcessServiceServer(s grpc.ServiceRegistrar, srv ProcessServiceServer) {
	s.RegisterService(&ProcessService_ServiceDesc, srv)
}

func _ProcessService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProcessServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProcessService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProcessServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProcessService_Stop_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StopRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessServiceServer).Stop(m, &processServiceStopServer{stream})
}

type ProcessService_StopServer interface {
	Send(*StopResponse) error
	grpc.ServerStream
}

type processServiceStopServer struct {
	grpc.ServerStream
}

func (x *processServiceStopServer) Send(m *StopResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProcessService_Restart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StopRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProcessServiceServer).Restart(m, &processServiceRestartServer{stream})
}

type ProcessService_RestartServer interface {
	Send(*StopResponse) error
	grpc.ServerStream
}

type processServiceRestartServer struct {
	grpc.ServerStream
}

func (x *processServiceRestartServer) Send(m *StopResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ProcessService_ServiceDesc is the grpc.ServiceDesc for ProcessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProcessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pm0.ProcessService",
	HandlerType: (*ProcessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _ProcessService_Start_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ProcessService_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stop",
			Handler:       _ProcessService_Stop_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Restart",
			Handler:       _ProcessService_Restart_Handler,
			ServerStreams: true,
		},
	},
	Metadata: ".proto/pm0.proto",
}
